head	1.8;
access;
symbols;
locks;
comment	@# @;


1.8
date	2013.10.17.00.10.32;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.10.12.02.24.18;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.10.11.02.13.03;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.01.25.03.40.36;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.01.25.03.22.48;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.01.25.03.17.34;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.01.25.03.16.43;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.01.25.03.05.09;	author -;	state -;
branches;
next	;


desc
@@


1.8
log
@-
@
text
@// $Id: jxref.java,v 1.7 2013-10-11 19:24:18-07 - - $

import java.io.*;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static java.lang.System.*;

class jxref {
   private static final String STDIN_FILENAME = "-";
   private static final String REGEX = "\\w+([-'.:/]\\w+)*";
   private static final Pattern PATTERN = Pattern.compile(REGEX);

   private static void xref_file (String filename, Scanner file){
      misc.trace ("filename", filename);
      listmap map = new listmap();
      for (int linenr = 1; file.hasNextLine(); ++linenr) {
         String line = file.nextLine();
         misc.trace (filename, linenr, line);
         Matcher match = PATTERN.matcher (line);
         while (match.find()) {
            String word = match.group();
            misc.trace ("word", word);
            //FIXME
         }
      }
      for (Entry<String, intqueue> entry: map) {
         misc.trace ("STUB", entry,
                     entry.getKey(), entry.getValue());
         //FIXME
      }
   }


   // For each filename, open the file, cross reference it,
   // and print.
   private static void xref_filename (String filename) {
      if (filename.equals (STDIN_FILENAME)) {
         xref_file (filename, new Scanner (System.in));
      }else {
         try {
            Scanner file = new Scanner (new File (filename));
            xref_file (filename, file);
            file.close();
         }catch (IOException error) {
            misc.warn (error.getMessage());
         }
      }
   }

   // Main function scans arguments to cross reference files.
   public static void main (String[] args) {
      if (args.length == 0) {
         xref_filename (STDIN_FILENAME);
      }else {
         for (String filename: args) {
            xref_filename (filename);
         }
      }
      exit (misc.exit_status);
   }

}

@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.6 2013-10-10 19:13:03-07 - - $
d27 1
d33 1
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.5 2013-01-24 19:40:36-08 - - $
d15 1
a15 1
   private static final Pattern PATTERN = Pattern.compile (REGEX);
d17 1
a17 1
   private static void xref_file (String filename, Scanner file) {
d30 2
a31 1
         misc.trace ("STUB", entry, entry.getKey(), entry.getValue());
d36 2
a37 1
   // For each filename, open the file, cross reference it, and print.
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.4 2013-01-24 19:22:48-08 - - $
d34 1
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.3 2013-01-24 19:17:34-08 - - $
a51 1
         // No files specified on the command line.
d54 2
a55 3
         // Iterate over each filename given on the command line.
         for (int argi = 0; argi < args.length; ++argi) {
            xref_filename (args[argi]);
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.2 2013-01-24 19:16:43-08 - - $
d18 1
a18 1
      misc.note ("TRACE", "filename", filename);
d22 1
a22 1
         misc.note ("TRACE", filename, linenr, line);
d26 1
a26 1
            misc.note ("TRACE", "word", word);
d30 1
a30 1
         misc.note ("STUB", entry, entry.getKey(), entry.getValue());
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.1 2013-01-24 19:05:09-08 - - $
d44 1
a44 2
            misc.exit_status = EXIT_FAILURE;
            misc.warn (JARNAME, error.getMessage());
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: jxref.java,v 1.11 2012-01-19 19:43:07-08 - - $
a12 1
   // Static program constants.
d14 2
a15 16
   private static final String JARNAME = get_jarname();
   private static final int EXIT_SUCCESS = 0;
   private static final int EXIT_FAILURE = 1;

   // Static exit status variable.
   private static int exit_status = EXIT_SUCCESS;

   // A basename is the final component of a pathname.
   // If a java program is run from a jar, the classpath is the
   // pathname of the jar.
   private static String get_jarname() {
      String jarpath = getProperty ("java.class.path");
      int lastslash = jarpath.lastIndexOf ('/');
      if (lastslash < 0) return jarpath;
      return jarpath.substring (lastslash + 1);
   }
a16 4

   private static final String WORD_REGEX = "\\w+([-'.:/]\\w+)*";
   private static final Pattern WORD_PATTERN
                      = Pattern.compile (WORD_REGEX);
d18 1
a18 1
      err.printf ("TRACE: filename = %s%n", filename);
d22 2
a23 2
         err.printf ("TRACE: %s: %4d: %s%n", filename, linenr, line);
         Matcher match = WORD_PATTERN.matcher (line);
d26 1
a26 1
            err.printf ("TRACE: word = %s%n", word);
d30 1
a30 2
         err.printf ("STUB: %s (%s, %s)%n", entry,
                     entry.getKey(), entry.getValue());
d44 2
a45 2
            exit_status = EXIT_FAILURE;
            err.printf ("%s: %s%n", JARNAME, error.getMessage());
d61 1
a61 1
      exit (exit_status);
@
